name: CI-CD

on:
  push:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest
#    environment: production
#    env:
#      SECRET_KEY: ${{ secrets.SECRET_KEY }}
#      POSTGRES_NAME: ${{ secrets.POSTGRES_NAME }}
#      POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
#      POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
#      POSTGRES_HOST: ${{ secrets.POSTGRES_HOST }}
#      POSTGRES_PORT: ${{ secrets.POSTGRES_PORT }}
#      TLS_MODE: ${{ secrets.TLS_MODE }}
#      SITE_HOST: ${{ secrets.SITE_HOST }}
#      DEBUG: ${{ secrets.DEBUG }}
#      HTPASSWD_NODE: ${{ secrets.HTPASSWD_NODE }}
#      HTPASSWD: ${{ secrets.HTPASSWD }}

    steps:
      - name: Clone repo
        uses: actions/checkout@v4

      - name: DB
        run: |
          docker compose -f docker-compose.yml pull db || true
          docker compose -f docker-compose.yml build db
          docker compose -f docker-compose.yml push db

      - name: Backend
        run: |
          docker compose -f docker-compose.yml pull backend || true
          docker compose -f docker-compose.yml build backend
          docker compose -f docker-compose.yml push backend

      - name: Frontend
        run: |
          docker compose -f docker-compose.yml -f docker-compose.frontend.yml pull frontend || true
          docker compose -f docker-compose.yml -f docker-compose.frontend.yml build frontend
          docker compose -f docker-compose.yml -f docker-compose.frontend.yml push frontend

      - name: Nginx
        run: |
          docker compose -f docker-compose.yml pull nginx || true
          docker compose -f docker-compose.yml build nginx
          docker compose -f docker-compose.yml push nginx

  tests:
    runs-on: ubuntu-latest
#    environment: production
    needs: [ build ]
    env:
      SECRET_KEY: ${{ secrets.SECRET_KEY }}
      POSTGRES_NAME: ${{ secrets.POSTGRES_NAME }}
      POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
      POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
      POSTGRES_HOST: ${{ secrets.POSTGRES_HOST }}
      POSTGRES_PORT: ${{ secrets.POSTGRES_PORT }}

    steps:
      - name: Clone repo
        uses: actions/checkout@v4

      - name: Pull backend
        run: docker compose -f docker-compose.yml pull backend || true

      - name: Pull db
        run: docker compose -f docker-compose.yml pull db || true

      - name: Test backend
        run: docker compose -f docker-compose.yml run --rm backend /bin/sh -c "pytest -p no:warnings --cov-report term:skip-covered --cov=."

  deploy:
    runs-on: ubuntu-latest
#    environment: production
    needs: [ tests ]
    env:
      DOCKER_HOST: ssh://$DEPLOY_USER@$DEPLOY_HOST
      PROJECT_NAME: ${CI_PROJECT_NAME}
      SERVER_NAME: ${CI_PROJECT_NAME}
      BRANCH_NAME: ${CI_COMMIT_REF_SLUG}

    steps:
      # Cloning repository
      - name: Clone repo
        uses: actions/checkout@v4

      # Setup SSH
      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.DEPLOY_SSH_KEY }}

      # Deploy
#      - name: Deploy to server
#        run: |
#          which ssh-agent || ( apk --update add openssh-client )
#          eval $(ssh-agent -s)
#          echo "${SSH_PRIVATE_KEY}" | tr -d '\r' | ssh-add - > /dev/null
#          mkdir -p ~/.ssh
#          chmod 700 ~/.ssh
#          ssh-keyscan "${DEPLOY_HOST}" >> ~/.ssh/known_hosts
#          chmod 644 ~/.ssh/known_hosts
#          [[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config
#          echo "${CI_REGISTRY_PASSWORD}" | docker login -u "${CI_REGISTRY_USER}" --password-stdin ${CI_REGISTRY}
#          ssh -o StrictHostKeyChecking=no ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }} "cd /stop_trip/ && git pull origin master"

      - name: which ssh_agent
        run: which ssh-agent || ( apk --update add openssh-client )

      - name: eval ssh_agent
        run: eval $(ssh-agent -s)

      - name: echo_ssh
        run: echo "${{ secrets.DEPLOY_SSH_KEY }}" | tr -d '\r' | ssh-add - > /dev/null

      - name: mkdir_p
        run: mkdir -p ~/.ssh

      - name: chmod_700
        run: chmod 700 ~/.ssh

      - name: ssh_keyscan
        run: ssh-keyscan "${{ secrets.DEPLOY_HOST }}" >> ~/.ssh/known_hosts

      - name: chmod_644
        run: chmod 644 ~/.ssh/known_hosts

      - name: docker_env
        run: echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config

      - name: docker_login
        run: echo "${CI_REGISTRY_PASSWORD}" | docker login -u "${CI_REGISTRY_USER}" --password-stdin ${CI_REGISTRY}

      - name: pulling
        run: ssh -o StrictHostKeyChecking=no ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }} "cd /stop_trip/ && git pull origin master"

      # Run server
      - name: Run server
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }} "cd /stop_trip/"
          docker compose -f docker-compose.yml -f docker-compose.frontend.yml pull
          docker compose -f docker-compose.yml -f docker-compose.frontend.yml up --remove-orphans -d
